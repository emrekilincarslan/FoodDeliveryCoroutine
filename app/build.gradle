apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'
apply plugin: 'androidx.navigation.safeargs.kotlin'

allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation 'com.delivery.mobile.OpenClass'
}


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        applicationId "com.delivery.mobile"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.delivery.mobile.util.AppTestRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
jacoco {
    toolVersion = "$rootProject.jacocoVersion"
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.0.0-rc02'

    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // RETROFIT
    implementation "com.squareup.retrofit2:retrofit:2.5.0"
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'
    implementation "com.squareup.retrofit2:converter-gson:2.5.0"



    // DAGGER
    implementation "com.google.dagger:dagger-android-support:2.21"
    kapt "com.google.dagger:dagger-compiler:2.21"
    kapt "com.google.dagger:dagger-android-processor:2.21"

    // ROOM

    implementation "androidx.room:room-runtime:2.2.0-alpha01"
    kapt "androidx.room:room-compiler:2.2.0-alpha01"
    implementation "androidx.room:room-ktx:2.2.0-alpha01"
    
    

    // LIFECYCLE
    implementation "android.arch.lifecycle:extensions:2.1.0"
    annotationProcessor "android.arch.lifecycle:compiler:2.1.0"

    // MATERIAL (For cardview and recyclerview)
    implementation "com.google.android.material:material:1.1.0-beta01"

    // LOTTIE
    implementation 'com.airbnb.android:lottie:3.0.7'

    // NAVIGATION
    implementation 'androidx.navigation:navigation-fragment-ktx:2.1.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.1.0'



    // ASSERTIONS
    testImplementation 'org.assertj:assertj-core:3.10.0'
    androidTestImplementation 'androidx.test:rules:1.3.0-alpha02'

    testImplementation("android.arch.core:core-testing:1.1.1", {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    })
    implementation 'com.google.android.gms:play-services-location:17.0.0'

    //coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3'
    implementation "androidx.work:work-runtime-ktx:2.1.0"

    implementation 'com.maksim88:PasswordEditText:v0.9'
    kapt "com.android.databinding:compiler:3.5.3"

    implementation 'com.facebook.shimmer:shimmer:0.1.0@aar'


    implementation 'com.github.florent37:expansionpanel:1.2.2'

    //livedata
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0-alpha02"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0-alpha02"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0-alpha02"


    implementation "fr.speekha.httpmocker:gson-adapter:1.1.8"

    // Testing dependencies
    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$rootProject.mockwebserverVersion"
    testImplementation "androidx.arch.core:core-testing:$rootProject.coreTestingVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"

    androidTestImplementation "androidx.test:core:$rootProject.testCoreVersion"
    androidTestImplementation "androidx.test:runner:$rootProject.testRunnerVersion"
    androidTestImplementation "androidx.test:rules:$rootProject.testRulesVersion"


    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.testExtJunit"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$rootProject.uiAutomatorVersion"
    androidTestImplementation "androidx.work:work-testing:$rootProject.workVersion"

    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.coreTestingVersion"
    androidTestImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    androidTestImplementation "org.mockito:mockito-android:$rootProject.mockitoAndroidVersion"


}

task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*_*Factory.class',
                      '**/*ComponentImpl.class',
                      '**/*SubComponentBuilder.class']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

}


// we need all open to run tests which  a we enable only for debug builds.
project.tasks.whenTaskAdded {
    if (it.name == "testReleaseUnitTest") {
        it.enabled = false
    }
}